# -*- coding: utf-8 -*-
"""jupyter-notebook-test2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12YHmbpUnhQfTIsAI5Yb2nX-0NXjRCV22

### Intro to Earth Analytics pt2

**Author: Martin Iglesias**


**Date:xx+1/xx/2021**

[Raster](https://www.earthdatascience.org/courses/use-data-open-source-python/intro-raster-data-python/fundamentals-raster-data)
"""

!pip install geopandas
!pip install rasterio
!pip install earthpy

# Import necessary packages
import os

import matplotlib.pyplot as plt
import numpy as np
import geopandas as gpd
import rasterio as rio

# Earthpy is an earthlab package to work with spatial data
import earthpy as et
import earthpy.plot as ep

# Get data and set working directory
et.data.get_data("colorado-flood")
os.chdir(os.path.join(et.io.HOME, 'earth-analytics', 'data'))

#you can open raster data in Python using rasterio
# Create a path to file
lidar_dtm_path = os.path.join("colorado-flood",
                              "spatial",
                              "boulder-leehill-rd",
                              "pre-flood",
                              "lidar",
                              "pre_DTM.tif")
lidar_dtm_path
# Create a connection to the file
# Open and read in the digital terrain model
# Note that rio is the alias for rasterio
with rio.open(lidar_dtm_path) as src:
    # Read the data in and call it lidar_dtm (this is the variable name)
    lidar_dtm = src.read(1,masked=True)

# View the data - notice the data structure is different from geopandas data
# which you explored in the last lesson
#The lidar DTM that you opened represents a dataset produced before a flood occurred in 2013 in Colorado. 
lidar_dtm

#¿qué información tengo?
type(lidar_dtm)

# View the min and max values of the array
print(lidar_dtm.min(), lidar_dtm.max())

# View the dimensions of the array (rows, columns)
lidar_dtm.shape

#se grafica un modelo de terreno hecho por lidar
ep.plot_bands(lidar_dtm,
              scale=False,
              cmap='Greys',
              title="Lidar Digital Terrain Model")
plt.show()

#challenge 1
#los datos del arrray son las elevaciones en metros. En el grafico se muestra que las elevaciones más elevadas están en color más oscuro.

#Challenge 2: Open & Plot a Raster Dataset

Use the code below to create a path to the post-flood data. Then do the following using the code above as a guide to open and plot your data:

    Use rasterio to open the data as a numpy array following the code that you used above
    View the min and max data values for the output numpy array
    Create a plot of the data

lidar_dem_path_post_flood = os.path.join("colorado-flood", "spatial",
                                         "boulder-leehill-rd", "post-flood", "lidar",
                                         "post_DTM.tif")

with rio.open(lidar_dem_path_post_flood) as src:
    # Read the data in and call it lidar_dtm (this is the variable name)
    lidar_post_dtm = src.read(1,masked=True)

# View the min and max values of the array
print(lidar_post_dtm.min(), lidar_post_dtm.max())

#se grafica un modelo de terreno hecho por lidar
ep.plot_bands(lidar_post_dtm,
              scale=False,
              cmap='Greys_r',
              title="Lidar Digital Terrain Model")
plt.show()

#IMAGERY MAPS
# Download NAIP data
et.data.get_data(url="https://ndownloader.figshare.com/files/23070791")

# Create a path for the data file - notice it is a .tif file
naip_pre_fire_path = os.path.join("earthpy-downloads",
                                  "naip-before-after",
                                  "pre-fire",
                                  "crop",
                                  "m_3910505_nw_13_1_20150919_crop.tif")

naip_pre_fire_path

# Open the data using rasterio
with rio.open(naip_pre_fire_path) as naip_prefire_src:
    naip_pre_fire = naip_prefire_src.read()

naip_pre_fire

# Plot each layer or band of the image separately
ep.plot_bands(naip_pre_fire, figsize=(10, 5))
plt.show()

# Plot color image (genera un rgb )
#https://earthpy.readthedocs.io/en/latest/gallery_vignettes/plot_bands_functionality.html
ep.plot_rgb(naip_pre_fire,
            title="naip data pre-fire")
plt.show()

#Challenge: Plot NAIP Imagery Post Fire
# Create a path for the data file - notice it is a .tif file
naip_post_fire_path = os.path.join("earthpy-downloads",
                                  "naip-before-after",
                                  "post-fire",
                                  "crop",
                                  "m_3910505_nw_13_1_20170902_crop.tif")

naip_post_fire_path

# Open the data using rasterio
with rio.open(naip_post_fire_path) as naip_postfire_src:
    naip_post_fire = naip_postfire_src.read()

naip_post_fire

# Plot each layer or band of the image separately
ep.plot_bands(naip_post_fire, figsize=(10, 5))
plt.show()

ep.plot_rgb(naip_post_fire,
            title="naip data pre-fire")
plt.show()

