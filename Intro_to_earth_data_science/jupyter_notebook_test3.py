# -*- coding: utf-8 -*-
"""jupyter-notebook-test3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12YHmbpUnhQfTIsAI5Yb2nX-0NXjRCV22

### Intro to Earth Analytics pt2

**Author: Martin Iglesias**


**Date:xx+1/xx/2021**

[Spatial Vector Data](https://www.earthdatascience.org/courses/use-data-open-source-python/intro-vector-data-python/spatial-data-vector-shapefiles/)
"""

!pip install geopandas
!pip install earthpy

# Import packages
import os
import matplotlib.pyplot as plt
import geopandas as gpd
import earthpy as et

# Get data and set working directory
data = et.data.get_data('spatial-vector-lidar') #incorporo de la base de datos de earthpy https://github.com/earthlab/earthpy
os.chdir(os.path.join(et.io.HOME, 'earth-analytics'))

#    A polygon shapefile representing our field site boundary,
#    A line shapefile representing roads, and
#    A point shapefile representing the location of field sites at the San Joachin field site.

# Define path to file
plot_centroid_path = os.path.join("data", "spatial-vector-lidar", 
                                  "california", "neon-sjer-site", 
                                  "vector_data", "SJER_plot_centroids.shp")

# Import shapefile using geopandas
sjer_plot_locations = gpd.read_file(plot_centroid_path)
#https://www.earthdatascience.org/courses/use-data-open-source-python/intro-vector-data-python/spatial-data-vector-shapefiles/

# View top 6 rows of attribute table
sjer_plot_locations.head(6)
#observo la posición de los puntos, el tipo de geometria (punto, linea o poligono), que representan

# View the geometry type of each row
sjer_plot_locations.geom_type

# View object type 
type(sjer_plot_locations)

# View CRS of object (observo la proyección de mis datoss. es WGS 84 spatialreference.org/ref/epsg/wgs-84-utm-zone-11n/)
sjer_plot_locations.crs
#https://www.earthdatascience.org/courses/use-data-open-source-python/intro-vector-data-python/spatial-data-vector-shapefiles/intro-to-coordinate-reference-systems-python/

# View the spatial extent
sjer_plot_locations.total_bounds
#The spatial extent of a shapefile or geopandas GeoDataFrame represents the geographic "edge" or location that is the furthest north, south east and west

#cuantos atributos(campos) tengo en mi shapefile e instancias (filas)
sjer_plot_locations.shape

#Ploteamos los datos
fig, ax1 = plt.subplots(figsize=(10, 10))

# Plot the data using geopandas .plot() method
sjer_plot_locations.plot(ax=ax1)

#diferencio los distintos tipos de elementos , respecto a su categoria que tiene la variable plot_type (categorico)
fig, ax = plt.subplots(figsize=(10, 10))

# Plot the data and add a legend
sjer_plot_locations.plot(column='plot_type', #column: the attribute column that you want to plot your data using
                         categorical=True, #categorical=True: set the plot to plot categorical data - in this case plot types.
                         legend=True,
                         figsize=(10, 6),
                         markersize=45, #markersize: increase or decrease the size of the points or markers rendered on the plot
                         cmap="Set2",
                         ax=ax)
# Add a title
ax.set_title('SJER Plot Locations\nMadera County, CA')

plt.show()

#cambio el marcador y el color (cmap https://matplotlib.org/3.1.0/tutorials/colors/colormaps.html)
fig, ax = plt.subplots(figsize=(10, 10))

sjer_plot_locations.plot(column='plot_type',
                         categorical=True,
                         legend=True,
                         marker='*',
                         markersize=65,
                         cmap='OrRd', 
                         ax=ax)

ax.set_title('SJER Plot Locations\nMadera County, CA')

plt.show()

"""Plot Multiple Shapefiles Together With Geopandas"""

# Define path to crop boundary
sjer_crop_extent_path = os.path.join("data", "spatial-vector-lidar", 
                                     "california", "neon-sjer-site", 
                                     "vector_data", "SJER_crop.shp")

# Import crop boundary
sjer_crop_extent = gpd.read_file(sjer_crop_extent_path)

fig, ax = plt.subplots(figsize=(10, 10))

# First setup the plot using the crop_extent layer as the base layer
sjer_crop_extent.plot(color='lightgrey',
                      edgecolor='black',
                      alpha=.5,
                      ax=ax)

# Add another layer using the same ax
sjer_plot_locations.plot(column='plot_type',
                         categorical=True,
                         marker='*',
                         legend=True,
                         markersize=50,
                         cmap='Set2', ax=ax)
# Clean up axes
ax.set_title('SJER Plot Locations\nMadera County, CA')
ax.set_axis_off()

plt.axis('equal')
plt.show()

"""What Data Are Stored In Spatial Vector Formats?

Some examples of data that often are provided in a vector format include:

    census data including municipal boundaries
    roads, powerlines and other infrastructure boundaries
    political boundaries
    building outlines
    water bodies and river systems
    ecological boundaries
    city locations
    object locations including plots, stream gages, and building locations
"""

# Import packages
import os

import matplotlib.pyplot as plt
import geopandas as gpd
import earthpy as et

# Download the data and set working directory
et.data.get_data(
    url='https://www.naturalearthdata.com/http//www.naturalearthdata.com/download/50m/cultural/ne_50m_admin_0_boundary_lines_land.zip')

# Set working directory - earthpy creates earth-analytics for you in your home dir
os.chdir(os.path.join(et.io.HOME, 'earth-analytics'))

coastlines_url = "https://www.naturalearthdata.com/http//www.naturalearthdata.com/download/50m/physical/ne_50m_coastline.zip"

et.data.get_data(url=coastlines_url)

coastlines_path = os.path.join("data", "earthpy-downloads",
                               "ne_50m_coastline",
                               "ne_50m_coastline.shp")

coastlines = gpd.read_file(coastlines_path)
coastlines.head()

# Plot the data (CREAR Las lineas costeras con geopandas)
f, ax1 = plt.subplots(figsize=(12, 6))
coastlines.plot(ax=ax1)

# Add a title to your plot
ax1.set(title="Global Coastline Boundaries")
plt.show()

#veo su geometria e informacion
# Is the geometry type point, line or polygon?
coastlines.geom_type

coastlines.info()

#añadiré puntos a mi mapa
# Open a second layer
et.data.get_data(
    url='https://www.naturalearthdata.com/http//www.naturalearthdata.com/download/50m/cultural/ne_50m_populated_places_simple.zip')

# Create a path to the populated places shapefile
populated_places_path = os.path.join("data", "earthpy-downloads",
                                     "ne_50m_populated_places_simple",
                                     "ne_50m_populated_places_simple.shp")

cities = gpd.read_file(populated_places_path)
cities.head()

#challenge veo la geometria de cities
cities.geom_type

# Create a map or plot with two data layers
f, ax1 = plt.subplots(figsize=(10, 6))
coastlines.plot(ax=ax1,
                color="black")
cities.plot(ax=ax1)  #atención en ambos hay que especificar el mismo axis

# Add a title
ax1.set(title="Map of Cities and Global Lines")
plt.show()

